Authentication : 

-> when we create an api in the route file then we have to tell the server so we have to add app.use('/',<route-file>) that we make more api in the route file now we have to many different types of api for different works like coustmer , products etc so we have to give the prefix of the api in the app.use() like :

app.use('/coustmer',coustmerRoutes)
app.use('/product',productRoutes)
app.use('/service',serviceRoutes)

like this we have to mention it which api works for which purpose . now when the server is running then its prefixof api is changed like 


Ex :-
app.use('/auth',userRoutes) then our api prefic was like

/auth/register
/auth/login
/auth/user
/auth/logout


-> for making tokens we use the package jsonwebtoken 

-> for token we use 
const token = jwt.sign({},<secret key>)

in jwt there is a method sign which tkaess two values one is objects and another one is secret code generated by jwt seccure generator and that key was used in lifetime of applicatiion applicable its a very credential informatio of the developer so we put it in env file

jwt ki jo secret key h wo agar kisi ko publicly mil gai to usse pure use pure web application ki waat lag jayegi in the sense anyone can login on the behalf of any user and do what ever they want

in sign method there is an object pass krna hota hai, jisme user ke information hoti hai aur jab server token create krta hai to wo user ki info ka and Security key ka use krke token generatekrta h

-> JWT Secret Key ka kaam kya hai?

1> Token Signing

Jab server JWT banata hai, usme 3 parts hote hain:

Header
Payload (user info, expiry, etc.)
Signature

Signature server ki secret key se generate hota hai.
Ye ensure karta hai ki token valid hai aur kisi ne modify nahi kiya.

2> Verification

Jab client (frontend / mobile app) token lekar request bhejta hai, server dobara secret key use karke token verify karta hai.

Agar payload me koi bhi change kiya gaya hoga, signature match nahi karega â†’ token invalid ho jayega.

3> Security Layer

Secret key ek password jaisa hota hai jo sirf server ke paas hota hai.

Agar koi attacker token ke andar ka payload change kare (for example role = "user" â†’ "admin"), to bina secret key ke wo sahi signature generate nahi kar payega.




-> suppose maine ye input kiya jwt.sign({id:1,username:"Aryan",role:"dev"},"9445fwhfwuiegvaheniwrgr778efee") maine kuch aisa diya to isme mujhe ek ek chij clear krke batao ki header kya h payload kya h and token kaise bana skte h iske mdat se etc all of things


jwt.sign(
  { id: 1, username: "Aryan", role: "dev" }, 
  "9445fwhfwuiegvaheniwrgr778efee"
)

to exactly kya hota hai aur token ke andar kaise cheezein banti hain.

ðŸ”¹ Step 1: Input Breakdown

Payload (object):

json
Copy code
{
  "id": 1,
  "username": "Aryan",
  "role": "dev"
}

Secret Key: 9445fwhfwuiegvaheniwrgr778efee

ðŸ”¹ Step 2: JWT Token ke 3 Parts

JWT = Header.Payload.Signature

ðŸŸ¢ 1. Header

<isme header me jo algorithm use hui ha toke ko generate krne usko obj me krke phir uski ek secure string generate krte hai using base64UrlEncode>

Ye JSON object hota hai jo algorithm aur token type batata hai:

{
  "alg": "HS256",
  "typ": "JWT"
}
Base64Url encode karne ke baad kuch aisa banega:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9


ðŸŸ¡ 2. Payload

<isme jo hmne user ka data diya tha object ke form me isme usko bhi base64 se encode krke ek random string generate krke dega kyu ki base64 me jab input me ek bhi letter ya number bhi chnage hota h to bse64 puri string hi change kr deta h that's why its secure jab user verify krne ka time atah to usme koi bhi glti aati to base64 ki url matchhi nhi krti to user verify nhi ho pata h>

Payload = tumhara diya hua object + auto generated claims (like iat).
Example:

{
  "id": 1,
  "username": "Aryan",
  "role": "dev",
  "iat": 1725379500
}
(iat = issued at time in UNIX timestamp)

Base64Url encode karne ke baad:

eyJpZCI6MSwidXNlcm5hbWUiOiJBenlhbiIsInJvbGUiOiJkZXYiLCJpYXQiOjE3MjUzNzk1MDB9


ðŸ”´ 3. Signature
Signature generate hota hai formula se:

HMACSHA256(
   base64UrlEncode(header) + "." + base64UrlEncode(payload),
   secretKey
)

Yaha secret key = "9445fwhfwuiegvaheniwrgr778efee"

Iska result ek hash hota hai (unique string) â†’ fir base64Url encode hota hai.
Example:

kqPq5q4pZx3sPVz7Z-tHzYMGh1DNjY8MiGABvA0l0Ug

ðŸ”¹ Step 3: Final Token
Ab tino ko . (dot) se jod do:

<header>.<payload>.<signature>


Example token:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJpZCI6MSwidXNlcm5hbWUiOiJBenlhbiIsInJvbGUiOiJkZXYiLCJpYXQiOjE3MjUzNzk1MDB9.
kqPq5q4pZx3sPVz7Z-tHzYMGh1DNjY8MiGABvA0l0Ug




Verification of Token :

-> jwt.verify(<token from user>,<Security key>) : in the method we have to verify the given token from the user.jab hmara token verify ho jata h to ye function hmme return me data return krta hai jo hmne token bnane ke liye use kiya tha


-> here i made a Authentication based user login in backed where an user an come and register on  my website and after the registration server creates token for that user now after the creation of token we use that token to find that which user send request to the server anfter the registration on web page beacuse there is multiple users in the database so now server ne request me jo token aai h usko padha and usse verify kiya after the Verification hme payload se user ki id mili and usse id ko leke server ne database me query chalai aur jo bhi user uss id se match hua uska data fetch ho gaya




-> .select("-password -__v").lean()

ðŸ‘‰ Lean ka use tab hi hoga jab:

Tumhe sirf database se data read karke lena hai.

Us data ko bas frontend bhejna hai ya simple JS object jaisa hi use karna hai.

Tumhe us data pe Mongoose ke methods (jaise .save(), .populate(), .validate()) use nahi karne.

ðŸ‘‰ Lean ka use nahi hoga jab:

Tum fetched data ke saath firse database me update/save karna chahte ho.

Tumhe mongoose ke document features (virtuals, getters/setters, hooks) chahiye.


Cookie :

-> in cookie we store our tokens which having very less dtorage like 4kb only and its data send to the server with the HTTP each and every request 

-> for using Cookie we have to install an package name is cookie-parser 

-> use middleware for the using cookie storage

-> res.cookie("token",token) : this how we can store the token in cookie and after sending the request to the server this token will autometically send to the server, +point is server an automatically save the token in the cookie 

-> it is an application level middleware